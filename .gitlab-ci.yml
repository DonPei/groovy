image: maven:3.8.6-jdk-11

default:
  tags:
    - java
    - maven

variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -noverify"
  RD_TOKEN: $RD_TOKEN
  ADOBE_GIT_REPO_URL: "git.cloudmanager.adobe.com/mdanderson/campaign/"

cache:
  paths:
    - .m2/repository/
    - target/

stages:
  - sync
  - build
  - deploy_artifactory
  - sync1
  - sync2

sync_to_github:
  stage: sync1
  #image: alpine/git # Use an image with Git pre-installed
  #before_script:
  script:
    - git config --global user.email "donghongpei@gmail.com"
    - git config --global user.name "DonPei"
    - git remote add github "https://oauth2:${GITHUB_TOKEN}@github.com/DonPei/groovy.git"
    - git push --force github HEAD:main # Adjust 'main' to your desired branch
  only:
    - main # Or the branch you want to trigger the sync from

sync_to_adobe_cloud:
  stage: sync
  script:
    - git config --global user.email "dpei1@mdanderson.org"
    - git config --global user.name "d-pei1-mdanderson-org"
    - git remote add adobe "https://${CM_SYNC_USER_NAME}:${CM_SYNC_USER_ACCESS_TOKEN}@$ADOBE_GIT_REPO_URL"

    # Fetch Adobe branches and tags
    - git fetch adobe
    - git fetch --tags

    # Determine if this is a tag or branch
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        echo "Detected tag: $CI_COMMIT_TAG"

        # Get previous tag (if any)
        PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

        # Generate release notes
        if [ -n "$PREV_TAG" ]; then
          git log $PREV_TAG..$CI_COMMIT_TAG --pretty=format:"- %s (%an)" > release-notes.txt
        else
          git log $CI_COMMIT_TAG --pretty=format:"- %s (%an)" > release-notes.txt
        fi

        # Push tag to Adobe
        git push adobe $CI_COMMIT_TAG
      else
        BRANCH=$CI_COMMIT_REF_NAME
        echo "Detected branch: $BRANCH"

        # Check if branch exists on Adobe
        if git ls-remote --heads adobe $BRANCH | grep $BRANCH; then
          echo "Adobe branch '$BRANCH' exists. Rebasing..."
          git checkout $BRANCH
          git rebase adobe/$BRANCH || (echo "Conflict detected. Manual resolution required." && exit 1)
        else
          echo "Adobe branch '$BRANCH' does not exist. Creating it..."
          git checkout $BRANCH
        fi

        # Push branch to Adobe
        git push adobe HEAD:$BRANCH
      fi
  rules:
    # Branch rules
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "release"'
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /^feature\/.*$/'
      when: always

    # Tag rule
    - if: "$CI_COMMIT_TAG"
      when: always

    # Default: skip other cases
    - when: never

sync_to_adobe_cloud2:
  stage: sync2
  script:
    - git config --global user.email "dpei1@mdanderson.org"
    - git config --global user.name "d-pei1-mdanderson-org"
    - git remote add adobe https://${CM_SYNC_USER_NAME}:${CM_SYNC_USER_ACCESS_TOKEN}@git.cloudmanager.adobe.com/mdanderson/campaign/

    - git fetch adobe
    - |
      if [ $CI_COMMIT_REF_NAME == "release" ]; then
        git checkout main
        git rebase adobe/main || (echo "Conflict during rebase. Manual resolution required." && exit 1)
      else
        git checkout $CI_COMMIT_REF_NAME
        git rebase adobe/$CI_COMMIT_REF_NAME || (echo "Conflict during rebase. Manual resolution required." && exit 1)
      fi

    # Push to Adobe
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        echo "Syncing tag $CI_COMMIT_TAG to Adobe..."
        git push adobe $CI_COMMIT_TAG
      elif [ $CI_COMMIT_REF_NAME == "release" ]; then
        git push adobe HEAD:main
      else
        git push adobe HEAD:$CI_COMMIT_REF_NAME
      fi

  rules:
    # Branch rules
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "release"'
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /^feature\/.*$/'
      when: always

    # Tag rule
    - if: "$CI_COMMIT_TAG"
      when: always

    # Default: skip other cases
    - when: never

mvn:build:
  stage: build
  script:
    - echo "Maven snapshot build started now."
    - mvn $MAVEN_CLI_OPTS $MVN_OPTS package
    - echo "Maven snapshot build completed."

mvn:deploy_artifactory:
  stage: deploy_artifactory
  environment: develop
  dependencies:
    - mvn:build
  script:
    - echo "Start to deploy development to Artifactory."
    - mvn $MAVEN_CLI_OPTS $MVN_OPTS deploy
    - echo "Deployed successfully to Artifactory."
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
